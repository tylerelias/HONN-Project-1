swagger: "2.0"
info:
  description: ""
  version: "0.0.1"
  title: "Academic Reference Manager"
  contact:
    email: "tylerj17@ru.is" 
  license:
    name: "MIT"
    url: "http://opensource.org/licenses/MIT"
host: "127.0.0.1:8080"
basePath: "/api/v1"
tags:
- name: "Users"
  description: "User CURD functionality"
- name: "Publications"
  description: "Publication CURD functionality"
- name: "Lending"
  description: "Lending CURD functionality"
schemes: 
- "https"
- "http"
paths:
  /users:
    post:
      tags:
      - "Users"
      summary: "Create new User"
      operationId: "CreateUser"
      consumes:
      - "application/json"
      produces:
      - "application/son"
      parameters:
        - in: "body"
          name: "body"
          description: "User that should be added"
          required: true
          schema:
            $ref: "#/definitions/Users"
      responses:
        200:
          description: "Successful Operation"
          schema:
            $ref: "#/definitions/Users"
        405:
          description: "Invalid input"
  /users/{userId}:
    get:
      tags:
      - "Users"
      summary: "Find a user by his ID"
      operationId: "FindUserById"
      produces:
      - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of the User to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "User Search - Successful"
          schema:
            $ref: "#/definitions/Users"
        400: 
          description: "Invalid ID"
        404:
          description: "User not found"
    put:
      tags:
      - "Users"
      summary: "Updates a User"
      operationId: "UpdateUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of User that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          description: "Update User details"
          required: true
          schema:
            $ref: "#/definitions/Users"
      responses:
        200:
          description: "Update - Successful"
          schema:
            $ref: "#/definitions/Users"
        400:
          description: "Invalid ID"
        404:
          description: "User not found"
    delete:
      tags:
      - "Users"
      summary: "Deletes a User"
      operationId: "DeleteUser"
      parameters:
        - name: "userId"
          in: "path"
          description: "User ID to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Delete - Successful"
        400:
          description: "Ivalid ID supplied"
        404:
          description: "User not found"
  /users/list/{lookupDate}:
    get:
      tags:
      - "Users"
      summary: "Find a User Publication List by a specific Date"
      operationId: "FindUserList"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
        - name: "lookupDate"
          in: "path"
          description: "Date of the User List to return"
          required: true
          type: "string"
          format: "date-time"
        # The search for a List of Friends who have borrowed for more than a month can be a simple checkbox in his search, so you can easily tick it off and on, instead of having it in a seperated /path
        - name: "hasBorrowedForMoreThanMonth"
          in: "formData"
          description: "A Checkbox to filter the searches to users who have borrwed for more than a month"
          required: true
          type: "boolean"
      responses:
        200:
          description: "User List Search - Successful"
          schema:
            $ref: "#/definitions/Borrowers"
        400:
          description: "Invalid Date"
        404:
          description: "User Borrowing for this date not found"
  # Top Rated Articles (Filtering out already ones read by the user). The filtering out already read articles happens at the service leve, it would be a for loop iterating through the top rated articles, and seeing which one the user has read, if any. Then the list would be returned to the API call. Also in the Desc it says it should fetch a list of articles for the user, so I do not fetch ratings with it.
  /users/{userId}/top-rated:
    get:
      tags:
      - "Publications"
      summary: "Find a Publication by its ID"
      operationId: "RecommendedTopPublishes"
      produces:
      - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of the User's undread articles to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Reccomended Articles Search - Successful"
          schema:
            $ref: "#/definitions/Publications"
        400:
          description: "Invalid ID"
        404:
          description: "Publications not found"
  /users/{userId}/ratings:
    get:
      tags:
      - "Ratings"
      summary: "Find User Ratings by its User ID"
      operationId: "FindUserRatingById"
      produces:
      - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "User ID for the Ratings to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "User Ratings Search - Successful"
          schema:
            $ref: "#/definitions/Ratings"
        400:
          description: "Invalid ID"
        404:
          description: "User Ratings not found"
    put:
      tags:
      - "Ratings"
      summary: "Updates a User Rating"
      operationId: "UpdateUserRating"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of User Rating that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          description: "Update User rating"
          required: true
          schema:
            $ref: "#/definitions/Ratings"
      responses:
        200:
          description: "Update - Successful"
          schema:
            $ref: "#/definitions/Ratings"
        400:
          description: "Invalid ID"
        404:
          description: "User Rating not found"
    delete:
      tags:
      - "Ratings"
      summary: "Deletes a User Rating"
      operationId: "DeleteUserRating"
      parameters:
        - name: "userId"
          in: "path"
          description: "User ID Rating to delete"
          required: true
          type: "integer"
          format: "int64"
        - name: "ratingId"
          in: "path"
          description: "Rating ID to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Delete - Successful"
        400:
          description: "Ivalid ID supplied"
        404:
          description: "User Rating not found"
  /publications: 
    post:
      tags:
      - "Publications"
      summary: "Create a new Publication"
      operationId: "CreatePublication"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Publication that should be added"
          required: true
          schema:
            $ref: "#/definitions/Publications"
      responses:
        200:
          description: "Publication Creation Successful"
          schema:
            $ref: "#/definitions/Publications"
        405:
          description: "Invalid input"
  /publications/{publicationId}:
    get:
      tags:
      - "Publications"
      summary: "Find a Publication by its ID"
      operationId: "FindPublicationById"
      produces:
      - "application/json"
      parameters:
        - name: "publicationId"
          in: "path"
          description: "ID of the Publication to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Publication Search - Successful"
          schema:
            $ref: "#/definitions/Publications"
        400:
          description: "Invalid ID"
        404:
          description: "Publication not found"
    put:
      tags:
      - "Publications"
      summary: "Updates a Publication"
      operationId: "UpdatePublication"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - name: "publicationId"
          in: "path"
          description: "ID of Publication that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          description: "Update User details"
          required: true
          schema:
            $ref: "#/definitions/Publications"
      responses:
        200:
          description: "Update - Successful"
          schema:
            $ref: "#/definitions/Publications"
        400:
          description: "Invalid ID"
        404:
          description: "Publication not found"
    delete:
      tags:
      - "Publications"
      summary: "Deletes a Publication"
      operationId: "DeletePublication"
      parameters:
        - name: "publicationId"
          in: "path"
          description: "Publication ID to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Delete - Successful"
        400:
          description: "Ivalid ID supplied"
        404:
          description: "Publication not found"
  /publications/{publicationId}/ratings:
    get:
      tags:
      - "Ratings"
      summary: "Find a Publication Rating by its Publication ID"
      operationId: "FindPublicationRatingById"
      produces:
      - "application/json"
      parameters:
        - name: "publicationId"
          in: "path"
          description: "ID of the Publication Ratings to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Publication Rating Search - Successful"
          schema:
            $ref: "#/definitions/Ratings"
        400:
          description: "Invalid ID"
        404:
          description: "Publication Ratings not found"
  /publications/list/{lookupDate}:
    # There sould not have to be a function to Update a publication List, since its functionality is displaying data, not saving and storing. To edit specific lends, one should edit Borrows, that will change the results for List Publications
    # There sould not have to be a function to Delte a publication List, since its functionality is displaying data, not saving and storing. To delete specific lends, one should delete Borrows, that will change the results for List Publications
    # There sould not have to be a function to Create a publication List, since its functionality is displaying data, not saving and storing. To create specific lends, one should create a new Borrows, that will change the results for List Publications
    # Note that this applies to all List outputs in this program
    get:
      tags:
      - "Borrowers"
      summary: "Find a Borrowed Publication List by a specific Date"
      operationId: "FindPublicationList"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
        - name: "lookupDate"
          in: "path"
          description: "Date of the Publication List to return"
          required: true
          type: "string"
          format: "date-time"
      responses:
        200:
          description: "Publication List Search - Successful"
          schema:
            $ref: "#/definitions/Borrowers"
        400:
          description: "Invalid Date"
        404:
          description: "Publication Borrowing for this date not found"
  /borrowers/{borrowerId}:
    get:
      tags:
      - "Borrowers"
      summary: "Find a Borrower by its ID"
      operationId: "FindBorrowerById"
      produces:
      - "application/json"
      parameters:
        - name: "borrowerId"
          in: "path"
          description: "ID of the Borrower to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Borrower Search - Successful"
          schema:
            $ref: "#/definitions/Borrowers"
        400:
          description: "Invalid ID"
        404:
          description: "Borrower not found"
    put:
      tags:
      - "Borrowers"
      summary: "Updates a Borrower"
      operationId: "UpdateBorrower"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - name: "borrowerId"
          in: "path"
          description: "ID of Borrower that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          description: "Update Borrower details"
          required: true
          schema:
            $ref: "#/definitions/Publications"
      responses:
        200:
          description: "Update - Successful"
          schema:
            $ref: "#/definitions/Publications"
        400:
          description: "Invalid ID"
        404:
          description: "Borrower not found"
    delete:
      tags:
      - "Borrowers"
      summary: "Deletes a Borrower"
      operationId: "DeleteBorrower"
      parameters:
        - name: "borrowerId"
          in: "path"
          description: "Borrower ID to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Delete - Successful"
        400:
          description: "Ivalid ID supplied"
        404:
          description: "Borrow not found"
definitions:
  Users:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      phoneNumber:
        type: "string"
      address:
        type: "string"
  Publications:
    type: "object"
    properties:
      firstName:
        type: "string"
      lastName:
        type: "string"
      publicationTitle:
        type: "string"
      isbn:
        type: "string"
      journal:
        type: "string"
      year:
        type: "integer"
        format: "int64"
  Ratings:
    properties:
      publicationId:
        type: "integer"
        format: "int64"
      userId:
        type: "integer"
        format: "int64"
      rating:
        type: "integer"
        format: "int32"
  Borrowers:
    type: "object"
    properties:
      personId:
        type: "integer"
        format: "int64"
      personName:
        type: "string"
      borrowDate:
        type: "string"
        format: "date-time"
      returnDate:
        type: "string"
        format: "date-time"
      publicationId:
        type: "integer"
        format: "int64"
      publicationName:
        type: "string"